Welcome to the Microcytometry workflow developed by Jason Needham out of the University of Alabama at Birmingham (2020-21)

You can begin by sourcing 'microcyte.R' from within the main microcyte folder, which will allow you to run all the steps without individually sourcing the various scripts below. Before this, however, be sure to read about how these scripts work below so that you are using them correctly.

Steps to use this package:
0) *Install dependencies* These can be done by running the "0_setup.R" script. Not all of these are required for general functionality so check with the other bin functions to see what you require.

1) *Fill out schema.csv* The schema file holds all the metadata for your collection of images that will allow you to annotate, collect, and parse your image data. Using tidy data principles, each row should be a unqiue collection of images from a single observation (condition, knockdown, infection, etc) and the combined metadata should be unique for each row. This is most easily done by adding a notebook identifier that is unique to that condition (ex, JNp1_1 and JNp1_2 could be two rows, with both conditions existing within the JNp1 experiment, and two samples 1 and 2). After this column, there are the default image names. Since MicroCyte uses ImageJ for ROI extraction, each fluorescent image can and should be taken independently (no merged images). By default, there are 4 image identifiers (CH1, CH2, CH3, and CH4) that correspond to 4 potential fluorescent images (for example, beta actin, LAMP1, DAPI, and a viral protein). Since batch images are often saved by some default numbering system, a later function will use these image indentifiers to rename the images based on a given target. If your images are already saved by a target name, then its not important what you add in these columns but its good practice to write them out anyway. Also, not each row needs to use the same image identifiers, which can be helpful when analyzing mutliple experiments together. While these two entries are all that is required to continue, notebook IDs are often difficult to recall when capturing images, so its best to add additional columns of metadata to the schema to attach to the final datasets. For example, I might have two rows (notebook_id: JNp1_1 and JNp1_2) with the same image identifiers (CH1: betaActin, CH2: lamp1, CH3: dna, and CH4: nucleocapsid) but condition 1 is 24 hour timepoint and condition 2 is a 48 hou timepoint. By default, the first function, dirGen, will make two directories based on the notebook_id numbers, but it can be difficult to remember what times 1 and 2 refer to, and this is much more difficult with more complicated experiments/imaging. So by adding a 'time' column and adding '24hpi' and '48hpi', this data can be used to make directories labeled after the 'time' variable instead. Additional metadata will get concatonated with an underscore to build more even more descriptive directory names. For example, if there was a third row (JNp1_3) that was also collected at 48hpi, but was a mock-infected sample, I would add a second metadata column - 'infection' - that would contain the values of 'infected', 'infected' and 'uninfected' for these hypothetical rows. Now the generated folders would be '24hpi_infected', '48hpi_infected' and '48hpi_uninfected' - which is *way* more easy to visually parse than the unique notebook_ids. After you have filled out all the schema data (remembering that each row should have a unique notebook_id and/or a unique set of added metadata columns), you can continue with the next step. Due to some bad coding, any stain marking the DNA (ex. DAPI), should be labeled as 'dna'.

2) *Run 1_dirGen.R* This will automatically generate the appropriate working directories and subdirectories for you to add your images. First, if the basic directories 'files', 'data', and 'figures' aren't present in the main folder, they will be added. You are then prompted if you would like the directory names to be based off the 'name' or 'number'. The 'name' option looks for metadata (any columns after the image identifiers), concatonates it, and makes a subdirectory under the 'files' directory with that result. The 'number' option will simple make subdirectories under the 'files' directory named by the unique 'notebook_id'. You are also given the option to add another layer of subdirectories based on the number of images you would like to add per condition. If your microscope automatically ('auto' and is default) generates such directories, this isn't necessary, but if you're manually adding images or taking images one at a time, its a good idea to type 'single' at the prompt, followed by the number of image subdirectories you would like made under each condition subdirectory. Finally, if you are a fluorescent microscopy wunderkind or are in the future where >4 fluorescent targets are feasible, the last prompt will ask how mnay fluorescent images are expected in each image folder. Based on the schema, the default is '4' but, if you modify the schema to add additional fluorescent images, the naming concatonation will adjust itself based on the entered number. **Note**: I am uncertain if changing the number of images to be greater than 4 affect downstream metatdata annotation.

3) *Add images to the appropriate subdirectories.* They should be TIFs, and labeled either by their target, or using the default "1_CH#.tif" convention given by the Keyence microscope. If you have modified your schema file to use a different image indentifier system, then use that instead. Due to some bad coding, any stain marking the DNA (ex. DAPI), should be labeled as 'dna'.

3b) *Run 2_purgo.R* This will generate TIFs/PNGs from the images and correct for spectral overlap, if necessary. Can be run in manual (corrects between two images given by in the arguments), auto (corrects between CH3 and CH4), and full (sequentially corrects between CH1 through CH4) modes. If there is no overlap correction requried, then enter 'none'. Purgo will still run to setup the filestructure correctly, but it will not perform any spectral adjustments.

3c) *Run 3_reName.R* This takes the image numbering system and renames them to be human-readable targets as specificed in the schema file.

4) *Run 4_YggData_multi ImageJ macro* This extracts both nuclear-dependent data and nuclear-independent data from the images by iterating through every image file in the 'files' directory (so long as it uses the MicroCyte file structure). By editing the macro in imageJ, you can alter the default size and intensity thresholds for 'dna' as well as pick your own parameters for whatever fluorescent target you're using based on the the image name. Its highly recommended that you verify these thresholds are correct for a couple sample images prior to running.

5) *Run 5_imagen.R* This will combine the nuclear-dependent and nuclear-indendent data from each image into two datasets. One is a detailed list of each ROI in the Nucear-independent data, and the other is a detailed list of the Nuclear-dependent data with average data for the associated Nuclear-Indenpendent data. Nearest neighbor calculations are used to assign ROIs to specific nuclei.

6) *Run 6_concato.R* This will combine the individual image data within each condition into a single nuclear-dependent datasetand a nuclear-independent dataset. By default, all images pertaining to a single condition will be have its various extraction lower-quartile normalized to minimize and inter-image variation, but this parameter can be made 'FALSE'.

7) *Run 7_unite.R* This combines the individual conditions into a single nuclear-dependent datasetand a nuclear-independent dataset stored within the 'data' directory. Files can be united respective to a certain variable (ex, infected vs uninfected) or completely.

8) *Analyze data using SirMixaplot.R functions in Rstudio -OR- any Flow Cytometry software that will take a csv input.*
8a) SirMixaPlot - This is a series of automated R scripts to analyze and present data
8b) cap_ifa - This is a series of scripts to automatically call virally-infected plaques
8c) explore - This generates summary list from a dataset based on the schema file and user-selected categories
8d) icellate - This generates cropped images of specific cells within the images. Those cells can be individual cell numbers, or a list of cells. Line analyses are also generated centered on the middle of the nucleus (default 2 along the x and y axes, but if >2 are requested then the lines are run radially through the center of the cell).

I hope this makes your life easier and generates lots of data!

-Jason
